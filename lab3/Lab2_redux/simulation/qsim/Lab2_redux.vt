// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2017 18:04:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Adder_Display
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Adder_Display_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Adder_Display_vlg_check_tst (
	0H0,
	0H1,
	0H2,
	0H3,
	0H4,
	0H5,
	0H6,
	1H0,
	1H1,
	1H2,
	1H3,
	1H4,
	1H5,
	1H6,
	4H0,
	4H1,
	4H2,
	4H3,
	4H4,
	4H5,
	4H6,
	5H0,
	5H1,
	5H2,
	5H3,
	5H4,
	5H5,
	5H6,
	6H0,
	6H1,
	6H2,
	6H3,
	6H4,
	6H5,
	6H6,
	7H0,
	7H1,
	7H2,
	7H3,
	7H4,
	7H5,
	7H6,
	LED,
	Q0,
	Q1,
	Q2,
	Q3,
	sampler_rx
);
input  0H0;
input  0H1;
input  0H2;
input  0H3;
input  0H4;
input  0H5;
input  0H6;
input  1H0;
input  1H1;
input  1H2;
input  1H3;
input  1H4;
input  1H5;
input  1H6;
input  4H0;
input  4H1;
input  4H2;
input  4H3;
input  4H4;
input  4H5;
input  4H6;
input  5H0;
input  5H1;
input  5H2;
input  5H3;
input  5H4;
input  5H5;
input  5H6;
input  6H0;
input  6H1;
input  6H2;
input  6H3;
input  6H4;
input  6H5;
input  6H6;
input  7H0;
input  7H1;
input  7H2;
input  7H3;
input  7H4;
input  7H5;
input  7H6;
input  LED;
input  Q0;
input  Q1;
input  Q2;
input  Q3;
input sampler_rx;

reg  0H0_expected;
reg  0H1_expected;
reg  0H2_expected;
reg  0H3_expected;
reg  0H4_expected;
reg  0H5_expected;
reg  0H6_expected;
reg  1H0_expected;
reg  1H1_expected;
reg  1H2_expected;
reg  1H3_expected;
reg  1H4_expected;
reg  1H5_expected;
reg  1H6_expected;
reg  4H0_expected;
reg  4H1_expected;
reg  4H2_expected;
reg  4H3_expected;
reg  4H4_expected;
reg  4H5_expected;
reg  4H6_expected;
reg  5H0_expected;
reg  5H1_expected;
reg  5H2_expected;
reg  5H3_expected;
reg  5H4_expected;
reg  5H5_expected;
reg  5H6_expected;
reg  6H0_expected;
reg  6H1_expected;
reg  6H2_expected;
reg  6H3_expected;
reg  6H4_expected;
reg  6H5_expected;
reg  6H6_expected;
reg  7H0_expected;
reg  7H1_expected;
reg  7H2_expected;
reg  7H3_expected;
reg  7H4_expected;
reg  7H5_expected;
reg  7H6_expected;
reg  LED_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;

reg  0H0_prev;
reg  0H1_prev;
reg  0H2_prev;
reg  0H3_prev;
reg  0H4_prev;
reg  0H5_prev;
reg  0H6_prev;
reg  1H0_prev;
reg  1H1_prev;
reg  1H2_prev;
reg  1H3_prev;
reg  1H4_prev;
reg  1H5_prev;
reg  1H6_prev;
reg  4H0_prev;
reg  4H1_prev;
reg  4H2_prev;
reg  4H3_prev;
reg  4H4_prev;
reg  4H5_prev;
reg  4H6_prev;
reg  5H0_prev;
reg  5H1_prev;
reg  5H2_prev;
reg  5H3_prev;
reg  5H4_prev;
reg  5H5_prev;
reg  5H6_prev;
reg  6H0_prev;
reg  6H1_prev;
reg  6H2_prev;
reg  6H3_prev;
reg  6H4_prev;
reg  6H5_prev;
reg  6H6_prev;
reg  7H0_prev;
reg  7H1_prev;
reg  7H2_prev;
reg  7H3_prev;
reg  7H4_prev;
reg  7H5_prev;
reg  7H6_prev;
reg  LED_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;

reg  LED_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;

reg  last_LED_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:47] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 47'b1;
end

// update real /o prevs

always @(trigger)
begin
	0H0_prev = 0H0;
	0H1_prev = 0H1;
	0H2_prev = 0H2;
	0H3_prev = 0H3;
	0H4_prev = 0H4;
	0H5_prev = 0H5;
	0H6_prev = 0H6;
	1H0_prev = 1H0;
	1H1_prev = 1H1;
	1H2_prev = 1H2;
	1H3_prev = 1H3;
	1H4_prev = 1H4;
	1H5_prev = 1H5;
	1H6_prev = 1H6;
	4H0_prev = 4H0;
	4H1_prev = 4H1;
	4H2_prev = 4H2;
	4H3_prev = 4H3;
	4H4_prev = 4H4;
	4H5_prev = 4H5;
	4H6_prev = 4H6;
	5H0_prev = 5H0;
	5H1_prev = 5H1;
	5H2_prev = 5H2;
	5H3_prev = 5H3;
	5H4_prev = 5H4;
	5H5_prev = 5H5;
	5H6_prev = 5H6;
	6H0_prev = 6H0;
	6H1_prev = 6H1;
	6H2_prev = 6H2;
	6H3_prev = 6H3;
	6H4_prev = 6H4;
	6H5_prev = 6H5;
	6H6_prev = 6H6;
	7H0_prev = 7H0;
	7H1_prev = 7H1;
	7H2_prev = 7H2;
	7H3_prev = 7H3;
	7H4_prev = 7H4;
	7H5_prev = 7H5;
	7H6_prev = 7H6;
	LED_prev = LED;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
end

// update expected /o prevs

always @(trigger)
begin
	LED_expected_prev = LED_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
end



// expected LED
initial
begin
	LED_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected Q3
initial
begin
	Q3_expected = 1'bX;
end 
// generate trigger
always @(0H0_expected or 0H0 or 0H1_expected or 0H1 or 0H2_expected or 0H2 or 0H3_expected or 0H3 or 0H4_expected or 0H4 or 0H5_expected or 0H5 or 0H6_expected or 0H6 or 1H0_expected or 1H0 or 1H1_expected or 1H1 or 1H2_expected or 1H2 or 1H3_expected or 1H3 or 1H4_expected or 1H4 or 1H5_expected or 1H5 or 1H6_expected or 1H6 or 4H0_expected or 4H0 or 4H1_expected or 4H1 or 4H2_expected or 4H2 or 4H3_expected or 4H3 or 4H4_expected or 4H4 or 4H5_expected or 4H5 or 4H6_expected or 4H6 or 5H0_expected or 5H0 or 5H1_expected or 5H1 or 5H2_expected or 5H2 or 5H3_expected or 5H3 or 5H4_expected or 5H4 or 5H5_expected or 5H5 or 5H6_expected or 5H6 or 6H0_expected or 6H0 or 6H1_expected or 6H1 or 6H2_expected or 6H2 or 6H3_expected or 6H3 or 6H4_expected or 6H4 or 6H5_expected or 6H5 or 6H6_expected or 6H6 or 7H0_expected or 7H0 or 7H1_expected or 7H1 or 7H2_expected or 7H2 or 7H3_expected or 7H3 or 7H4_expected or 7H4 or 7H5_expected or 7H5 or 7H6_expected or 7H6 or LED_expected or LED or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 0H0 = %b | expected 0H1 = %b | expected 0H2 = %b | expected 0H3 = %b | expected 0H4 = %b | expected 0H5 = %b | expected 0H6 = %b | expected 1H0 = %b | expected 1H1 = %b | expected 1H2 = %b | expected 1H3 = %b | expected 1H4 = %b | expected 1H5 = %b | expected 1H6 = %b | expected 4H0 = %b | expected 4H1 = %b | expected 4H2 = %b | expected 4H3 = %b | expected 4H4 = %b | expected 4H5 = %b | expected 4H6 = %b | expected 5H0 = %b | expected 5H1 = %b | expected 5H2 = %b | expected 5H3 = %b | expected 5H4 = %b | expected 5H5 = %b | expected 5H6 = %b | expected 6H0 = %b | expected 6H1 = %b | expected 6H2 = %b | expected 6H3 = %b | expected 6H4 = %b | expected 6H5 = %b | expected 6H6 = %b | expected 7H0 = %b | expected 7H1 = %b | expected 7H2 = %b | expected 7H3 = %b | expected 7H4 = %b | expected 7H5 = %b | expected 7H6 = %b | expected LED = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | ",0H0_expected_prev,0H1_expected_prev,0H2_expected_prev,0H3_expected_prev,0H4_expected_prev,0H5_expected_prev,0H6_expected_prev,1H0_expected_prev,1H1_expected_prev,1H2_expected_prev,1H3_expected_prev,1H4_expected_prev,1H5_expected_prev,1H6_expected_prev,4H0_expected_prev,4H1_expected_prev,4H2_expected_prev,4H3_expected_prev,4H4_expected_prev,4H5_expected_prev,4H6_expected_prev,5H0_expected_prev,5H1_expected_prev,5H2_expected_prev,5H3_expected_prev,5H4_expected_prev,5H5_expected_prev,5H6_expected_prev,6H0_expected_prev,6H1_expected_prev,6H2_expected_prev,6H3_expected_prev,6H4_expected_prev,6H5_expected_prev,6H6_expected_prev,7H0_expected_prev,7H1_expected_prev,7H2_expected_prev,7H3_expected_prev,7H4_expected_prev,7H5_expected_prev,7H6_expected_prev,LED_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev);
	$display("| real 0H0 = %b | real 0H1 = %b | real 0H2 = %b | real 0H3 = %b | real 0H4 = %b | real 0H5 = %b | real 0H6 = %b | real 1H0 = %b | real 1H1 = %b | real 1H2 = %b | real 1H3 = %b | real 1H4 = %b | real 1H5 = %b | real 1H6 = %b | real 4H0 = %b | real 4H1 = %b | real 4H2 = %b | real 4H3 = %b | real 4H4 = %b | real 4H5 = %b | real 4H6 = %b | real 5H0 = %b | real 5H1 = %b | real 5H2 = %b | real 5H3 = %b | real 5H4 = %b | real 5H5 = %b | real 5H6 = %b | real 6H0 = %b | real 6H1 = %b | real 6H2 = %b | real 6H3 = %b | real 6H4 = %b | real 6H5 = %b | real 6H6 = %b | real 7H0 = %b | real 7H1 = %b | real 7H2 = %b | real 7H3 = %b | real 7H4 = %b | real 7H5 = %b | real 7H6 = %b | real LED = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | ",0H0_prev,0H1_prev,0H2_prev,0H3_prev,0H4_prev,0H5_prev,0H6_prev,1H0_prev,1H1_prev,1H2_prev,1H3_prev,1H4_prev,1H5_prev,1H6_prev,4H0_prev,4H1_prev,4H2_prev,4H3_prev,4H4_prev,4H5_prev,4H6_prev,5H0_prev,5H1_prev,5H2_prev,5H3_prev,5H4_prev,5H5_prev,5H6_prev,6H0_prev,6H1_prev,6H2_prev,6H3_prev,6H4_prev,6H5_prev,6H6_prev,7H0_prev,7H1_prev,7H2_prev,7H3_prev,7H4_prev,7H5_prev,7H6_prev,LED_prev,Q0_prev,Q1_prev,Q2_prev,Q3_prev);
`endif
	if (
		( LED_expected_prev !== 1'bx ) && ( LED_prev !== LED_expected_prev )
		&& ((LED_expected_prev !== last_LED_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_expected_prev);
		$display ("     Real value = %b", LED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_LED_exp = LED_expected_prev;
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Adder_Display_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
// wires                                               
wire 0H0;
wire 0H1;
wire 0H2;
wire 0H3;
wire 0H4;
wire 0H5;
wire 0H6;
wire 1H0;
wire 1H1;
wire 1H2;
wire 1H3;
wire 1H4;
wire 1H5;
wire 1H6;
wire 4H0;
wire 4H1;
wire 4H2;
wire 4H3;
wire 4H4;
wire 4H5;
wire 4H6;
wire 5H0;
wire 5H1;
wire 5H2;
wire 5H3;
wire 5H4;
wire 5H5;
wire 5H6;
wire 6H0;
wire 6H1;
wire 6H2;
wire 6H3;
wire 6H4;
wire 6H5;
wire 6H6;
wire 7H0;
wire 7H1;
wire 7H2;
wire 7H3;
wire 7H4;
wire 7H5;
wire 7H6;
wire LED;
wire Q0;
wire Q1;
wire Q2;
wire Q3;

wire sampler;                             

// assign statements (if any)                          
Adder_Display i1 (
// port map - connection between master ports and signals/registers   
	.\0H0 (0H0),
	.\0H1 (0H1),
	.\0H2 (0H2),
	.\0H3 (0H3),
	.\0H4 (0H4),
	.\0H5 (0H5),
	.\0H6 (0H6),
	.\1H0 (1H0),
	.\1H1 (1H1),
	.\1H2 (1H2),
	.\1H3 (1H3),
	.\1H4 (1H4),
	.\1H5 (1H5),
	.\1H6 (1H6),
	.\4H0 (4H0),
	.\4H1 (4H1),
	.\4H2 (4H2),
	.\4H3 (4H3),
	.\4H4 (4H4),
	.\4H5 (4H5),
	.\4H6 (4H6),
	.\5H0 (5H0),
	.\5H1 (5H1),
	.\5H2 (5H2),
	.\5H3 (5H3),
	.\5H4 (5H4),
	.\5H5 (5H5),
	.\5H6 (5H6),
	.\6H0 (6H0),
	.\6H1 (6H1),
	.\6H2 (6H2),
	.\6H3 (6H3),
	.\6H4 (6H4),
	.\6H5 (6H5),
	.\6H6 (6H6),
	.\7H0 (7H0),
	.\7H1 (7H1),
	.\7H2 (7H2),
	.\7H3 (7H3),
	.\7H4 (7H4),
	.\7H5 (7H5),
	.\7H6 (7H6),
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.LED(LED),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3)
);

// A0
initial
begin
	repeat(33)
	begin
		A0 = 1'b0;
		A0 = #15000 1'b1;
		# 15000;
	end
	A0 = 1'b0;
end 

// A1
initial
begin
	repeat(16)
	begin
		A1 = 1'b0;
		A1 = #30000 1'b1;
		# 30000;
	end
	A1 = 1'b0;
	A1 = #30000 1'b1;
end 

// A2
initial
begin
	repeat(11)
	begin
		A2 = 1'b0;
		A2 = #45000 1'b1;
		# 45000;
	end
	A2 = 1'b0;
end 

// A3
initial
begin
	repeat(8)
	begin
		A3 = 1'b0;
		A3 = #60000 1'b1;
		# 60000;
	end
	A3 = 1'b0;
end 

// B0
initial
begin
	repeat(33)
	begin
		B0 = 1'b0;
		B0 = #15000 1'b1;
		# 15000;
	end
	B0 = 1'b0;
end 

// B1
initial
begin
	repeat(16)
	begin
		B1 = 1'b0;
		B1 = #30000 1'b1;
		# 30000;
	end
	B1 = 1'b0;
	B1 = #30000 1'b1;
end 

// B2
initial
begin
	repeat(8)
	begin
		B2 = 1'b0;
		B2 = #60000 1'b1;
		# 60000;
	end
	B2 = 1'b0;
end 

// B3
initial
begin
	repeat(11)
	begin
		B3 = 1'b0;
		B3 = #45000 1'b1;
		# 45000;
	end
	B3 = 1'b0;
end 

Adder_Display_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.sampler_tx(sampler)
);

Adder_Display_vlg_check_tst tb_out(
	.0H0(0H0),
	.0H1(0H1),
	.0H2(0H2),
	.0H3(0H3),
	.0H4(0H4),
	.0H5(0H5),
	.0H6(0H6),
	.1H0(1H0),
	.1H1(1H1),
	.1H2(1H2),
	.1H3(1H3),
	.1H4(1H4),
	.1H5(1H5),
	.1H6(1H6),
	.4H0(4H0),
	.4H1(4H1),
	.4H2(4H2),
	.4H3(4H3),
	.4H4(4H4),
	.4H5(4H5),
	.4H6(4H6),
	.5H0(5H0),
	.5H1(5H1),
	.5H2(5H2),
	.5H3(5H3),
	.5H4(5H4),
	.5H5(5H5),
	.5H6(5H6),
	.6H0(6H0),
	.6H1(6H1),
	.6H2(6H2),
	.6H3(6H3),
	.6H4(6H4),
	.6H5(6H5),
	.6H6(6H6),
	.7H0(7H0),
	.7H1(7H1),
	.7H2(7H2),
	.7H3(7H3),
	.7H4(7H4),
	.7H5(7H5),
	.7H6(7H6),
	.LED(LED),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.sampler_rx(sampler)
);
endmodule

